// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title KingContract
/// @notice A contract that allows users to claim the throne by paying more than the current king's balance.
contract KingContract {
    address public king;
    uint public balance;
    mapping(address => uint) public balances;

    /// @notice Claims the throne by paying more than the current king's balance.
    function claimThrone() external payable {
        require(msg.value > balance, "Need to pay more to become the king");

        balances[king] += balance;

        balance = msg.value;
        king = msg.sender;
    }

    /// @notice Allows a non-king address to withdraw their balance.
    function withdraw() public {
        require(msg.sender != king, "Current king cannot withdraw");

        uint amount = balances[msg.sender];
        balances[msg.sender] = 0;

        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Failed to send Ether");
    }
}

/// @title KingAttack
/// @notice A contract representing an attack on the KingContract by attempting to claim the throne.
contract KingAttack {
    KingContract target;

    /// @notice Constructs the KingAttack contract, specifying the address of the target KingContract.
    /// @param _target The address of the KingContract to attack.
    constructor(KingContract _target) {
        target = KingContract(_target);
    }

    /// @notice Initiates the attack by calling the claimThrone function of the target contract and sending Ether with the attack.
    function attack() public payable {
        target.claimThrone{value: msg.value}();
    }
}
