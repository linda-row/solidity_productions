// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title isContractCheckContract
/// @notice A contract that has a protected function which can only be called by externally-owned accounts (EOAs) and not contracts.
contract isContractCheckContract {
    bool public pwned = false;

    /// @notice Protected function that can only be called by EOAs.
    /// @dev The function checks if the transaction origin matches the message sender.
    /// @dev If the check passes, it sets the 'pwned' state variable to true.
    /// @dev If the check fails, it reverts with an error message.
    function protected() external {
        require(tx.origin == msg.sender, "no contract allowed");
        pwned = true;
    }
}

/// @title isContractCheckAttack
/// @notice A contract that launches an attack by calling the 'protected' function of the isContractCheckContract.
contract isContractCheckAttack {
    address public addr;

    /// @notice Constructs the isContractCheckAttack contract and immediately invokes the 'protected' function of the target contract.
    /// @param _target The address of the target isContractCheckContract to attack.
    constructor(address _target) {
        addr = address(this);
        isContractCheckContract(_target).protected();
    }
}
